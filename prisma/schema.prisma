// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider = "cockroachdb"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String?
    provider                 String?
    providerAccountId        String?
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    ext_expires_in           Int?
    refresh_token_expires_in Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model organizationMember {
    email String @unique
}

model admin {
    email String @unique
}

model Product {
    id             String @id @default(cuid())
    price          Float
    availableCount Int
    soldCount      Int

    colorId   String
    color     Color     @relation(fields: [colorId], references: [id])
    fitId     String
    fit       Fit       @relation(fields: [fitId], references: [id])
    modelId   String
    model     ModelName @relation(fields: [modelId], references: [name])
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt

    @@unique([colorId, fitId, modelId])
}

model Brand {
    id        String      @id @default(cuid())
    name      String      @unique
    image     String      @default("https://www.politix.com.au/on/demandware.static/-/Library-Sites-PolitixSharedLibrary/default/dwf8efd648/Denim%20Range%20Blog%20Banner.jpg")
    modelName ModelName[]
}

model ModelName {
    id      String    @id @default(cuid())
    name    String    @unique
    brandId String
    brand   Brand     @relation(fields: [brandId], references: [id])
    image   String?
    product Product[]
}

model Color {
    id      String    @id @default(cuid())
    name    String    @unique
    product Product[]
}

model Fit {
    id          String    @id @default(cuid())
    name        String    @unique
    description String
    product     Product[]
}
